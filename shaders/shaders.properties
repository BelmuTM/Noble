###############################################
#        Copyright (C) NobleRT - 2022         #
#   Belmu | GNU General Public License V3.0   #
#                                             #
# By downloading this content you have agreed #
#     to the license and its terms of use.    #
###############################################

##-----------#  Minecraft Miscellaneous Settings  #-----------##

sun        = false
moon       = false
clouds     = off
rain.depth = true

separateAo        = false
vignette          = false
oldLighting       = false
oldHandLight      = false
underwaterOverlay = false
dynamicHandLight  = true

##-------------------#  Custom Uniforms  #--------------------##

uniform.int.framemod   = frameCounter % 8

uniform.vec2.viewSize  = vec2(viewWidth, viewHeight)
uniform.vec2.pixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

uniform.vec3.shadowVec = vec3(shadowLightPosition.x * 0.01, shadowLightPosition.y * 0.01, shadowLightPosition.z * 0.01)

# World space celestial vectors uniforms from Zombye#7365 (Spectrum - https://github.com/zombye/spectrum)

variable.float.sunVectorNorm = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
uniform.vec3.sunVectorView   = vec3(sunPosition.x * sunVectorNorm, sunPosition.y * sunVectorNorm, sunPosition.z * sunVectorNorm)
variable.float.sunVectorX    = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunVectorY    = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunVectorZ    = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunVector       = vec3(sunVectorX * sunVectorNorm, sunVectorY * sunVectorNorm, sunVectorZ * sunVectorNorm)

variable.float.moonVectorNorm = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
uniform.vec3.moonVectorView   = vec3(moonPosition.x * moonVectorNorm, moonPosition.y * moonVectorNorm, moonPosition.z * moonVectorNorm)
variable.float.moonVectorX    = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonVectorY    = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonVectorZ    = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonVector       = vec3(moonVectorX * moonVectorNorm, moonVectorY * moonVectorNorm, moonVectorZ * moonVectorNorm)

variable.float.shadowLightVectorNorm = 1.0 / sqrt((shadowLightPosition.x * shadowLightPosition.x) + (shadowLightPosition.y * shadowLightPosition.y) + (shadowLightPosition.z * shadowLightPosition.z))
uniform.vec3.shadowLightVectorView   = vec3(shadowLightPosition.x * shadowLightVectorNorm, shadowLightPosition.y * shadowLightVectorNorm, shadowLightPosition.z * shadowLightVectorNorm)
variable.float.shadowLightVectorX    = gbufferModelViewInverse.0.0 * shadowLightPosition.x + gbufferModelViewInverse.1.0 * shadowLightPosition.y + gbufferModelViewInverse.2.0 * shadowLightPosition.z
variable.float.shadowLightVectorY    = gbufferModelViewInverse.0.1 * shadowLightPosition.x + gbufferModelViewInverse.1.1 * shadowLightPosition.y + gbufferModelViewInverse.2.1 * shadowLightPosition.z
variable.float.shadowLightVectorZ    = gbufferModelViewInverse.0.2 * shadowLightPosition.x + gbufferModelViewInverse.1.2 * shadowLightPosition.y + gbufferModelViewInverse.2.2 * shadowLightPosition.z
uniform.vec3.shadowLightVector       = vec3(shadowLightVectorX * shadowLightVectorNorm, shadowLightVectorY * shadowLightVectorNorm, shadowLightVectorZ * shadowLightVectorNorm)

##-------------------#  Custom Textures  #--------------------##

texture.noise = image/HDR_RGB_0.png

#if LUT == 1
    texture.composite.colortex7 = image/lut/lut0.png
#elif LUT == 2
    texture.composite.colortex7 = image/lut/lut1.png
#elif LUT == 3
    texture.composite.colortex7 = image/lut/lut2.png
#elif LUT == 4
    texture.composite.colortex7 = image/lut/lut3.png
#elif LUT == 5
    texture.composite.colortex7 = image/lut/lut4.png
#elif LUT == 6
    texture.composite.colortex7 = image/lut/lut5.png
#elif LUT == 7
    texture.composite.colortex7 = image/lut/lut6.png
#elif LUT == 8
    texture.composite.colortex7 = image/lut/lut7.png
#elif LUT == 9
    texture.composite.colortex7 = image/lut/lut8.png
#elif LUT == 10
    texture.composite.colortex7 = image/lut/lut9.png
#elif LUT == 11
    texture.composite.colortex7 = image/lut/lut10.png
#elif LUT == 12
    texture.composite.colortex7 = image/lut/lut11.png
#elif LUT == 13
    texture.composite.colortex7 = image/lut/lut12.png
#elif LUT == 14
    texture.composite.colortex7 = image/lut/lut13.png
#elif LUT == 15
    texture.composite.colortex7 = image/lut/lut14.png
#elif LUT == 16
    texture.composite.colortex7 = image/lut/lut15.png
#elif LUT == 17
    texture.composite.colortex7 = image/lut/lut16.png
#elif LUT == 18
    texture.composite.colortex7 = image/lut/lut17.png
#elif LUT == 19
    texture.composite.colortex7 = image/lut/lut18.png
#elif LUT == 20
    texture.composite.colortex7 = image/lut/lut19.png
#endif

# Clouds noise textures
texture.deferred.depthtex2  = image/shapeNoise.dat TEXTURE_3D RGBA8 128 128 128 RGBA UNSIGNED_BYTE
texture.deferred.colortex13 = image/detailNoise.dat TEXTURE_3D RGB8 32 32 32 RGB UNSIGNED_BYTE
texture.deferred.colortex14 = image/curl.dat TEXTURE_3D RGB8 32 32 32 RGB UNSIGNED_BYTE

##--------------------#  Alpha Testing  #---------------------##

alphaTest.gbuffers_block      = off
alphaTest.gbuffers_entities   = off
alphaTest.gbuffers_hand       = off
alphaTest.gbuffers_hand_water = off
alphaTest.gbuffers_terrain    = off
alphaTest.gbuffers_textured   = off
alphaTest.gbuffers_water      = off
alphaTest.gbuffers_weather    = off
alphaTest.shadow              = off

##--------------------#  Alpha Blending  #--------------------##

blend.gbuffers_block    = off
blend.gbuffers_entities = off
blend.gbuffers_hand     = off
blend.gbuffers_terrain  = off
blend.gbuffers_textured = off
blend.shadow            = off

# Translucents
blend.gbuffers_weather              = off
blend.gbuffers_weather.colortex4    = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_water                = off
blend.gbuffers_water.colortex4      = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_hand_water           = off
blend.gbuffers_hand_water.colortex4 = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO

##--------------# Settings Menu Configuration #---------------##

# Profiles
profile.DEFAULT = BINARY_COUNT=6  ACCUMULATION_VELOCITY_WEIGHT=0 GI_STEPS=64  GI=0 GI_FILTER=1                            ATMOSPHERE_RESOLUTION=0.25 SCATTERING_STEPS=16 TRANSMITTANCE_STEPS=8
profile.RENDER  = BINARY_COUNT=10 ACCUMULATION_VELOCITY_WEIGHT=1 GI_STEPS=128 GI=1 GI_FILTER=0 GI_TEMPORAL_ACCUMULATION=1 ATMOSPHERE_RESOLUTION=1.00 SCATTERING_STEPS=28 TRANSMITTANCE_STEPS=20

# Screens
screen = ABOUT <profile> <empty> [LIGHTING] [ATMOSPHERICS] [TERRAIN] [CAMERA] [COLOR_CORRECTION]

screen.LIGHTING          = [RAYTRACING] [AMBIENT_OCCLUSION] DIRECTIONAL_LIGHTMAP BLOCKLIGHT_TEMPERATURE <empty> <empty> SUBSURFACE_SCATTERING MATERIAL_AO SHADOWS SPECULAR <empty> <empty> SHADOW_TYPE shadowMapResolution SHADOW_SAMPLES shadowDistance
screen.AMBIENT_OCCLUSION = AO AO_TYPE AO_FILTER AO_RESOLUTION <empty> <empty> SSAO_SAMPLES SSAO_RADIUS RTAO_SAMPLES RTAO_STEPS GTAO_SLICES GTAO_RADIUS
screen.RAYTRACING        = REFLECTIONS REFRACTIONS REFLECTIONS_TYPE REFLECTIONS_RESOLUTION <empty> <empty> GI [FILTER] SKY_CONTRIBUTION GI_RESOLUTION GI_SAMPLES GI_BOUNCES <empty> <empty> BINARY_REFINEMENT SSR_REPROJECTION
screen.FILTER            = GI_FILTER GI_TEMPORAL_ACCUMULATION ATROUS_STEP_SIZE <empty> NORMAL_WEIGHT_SIGMA DEPTH_WEIGHT_SIGMA LUMA_WEIGHT_SIGMA
screen.ATMOSPHERICS      = sunPathRotation CELESTIAL_SIZE_MULTIPLIER <empty> <empty> ATMOSPHERE_RESOLUTION [CLOUDS] SCATTERING_STEPS TRANSMITTANCE_STEPS <empty> <empty> AIR_FOG VL_SCATTERING_STEPS FOG_ALTITUDE FOG_THICKNESS FOG_DENSITY
screen.CLOUDS            = CLOUDS CLOUDS_RESOLUTION CLOUDS_SCATTERING_STEPS WIND_SPEED <empty> <empty> CLOUDS_LAYER0_ALTITUDE CLOUDS_LAYER0_THICKNESS CLOUDS_LAYER0_COVERAGE CLOUDS_LAYER0_SWIRL
screen.TERRAIN           = WHITE_WORLD [WATER] RAIN_PUDDLES RAIN_PUDDLES_SIZE <empty> <empty> POM POM_LAYERS POM_DEPTH
screen.WATER             = WATER_CAUSTICS WATER_CAUSTICS_STRENGTH <empty> <empty> WATER_OCTAVES WAVE_STEEPNESS WAVE_AMPLITUDE WAVE_SPEED <empty> <empty> WATER_FOG WATER_FOG_STEPS [WATER_ABSORPTION] [WATER_SCATTERING]
screen.WATER_ABSORPTION  = WATER_ABSORPTION_R WATER_ABSORPTION_G WATER_ABSORPTION_B
screen.WATER_SCATTERING  = WATER_SCATTERING_R WATER_SCATTERING_G WATER_SCATTERING_B
screen.CAMERA            = [CAMERA_SETTINGS] TAA <empty> <empty> DOF DOF_RADIUS BLOOM BLOOM_STRENGTH VIGNETTE VIGNETTE_STRENGTH FILM_GRAIN FILM_GRAIN_STRENGTH SHARPEN SHARPEN_STRENGTH
screen.COLOR_CORRECTION  = TONEMAP LUT <empty> <empty> WHITE_BALANCE <empty> VIBRANCE SATURATION CONTRAST GAMMA GAIN LIFT
screen.CAMERA_SETTINGS   = EXPOSURE PURKINJE <empty> FOCAL APERTURE ISO SHUTTER_SPEED

# Sliders
sliders = BLOCKLIGHT_TEMPERATURE shadowMapResolution SHADOW_SAMPLES shadowDistance AO_RESOLUTION SSAO_SAMPLES SSAO_RADIUS RTAO_SAMPLES RTAO_STEPS GTAO_SLICES GTAO_RADIUS \
          REFLECTIONS_RESOLUTION ATROUS_STEP_SIZE NORMAL_WEIGHT_SIGMA DEPTH_WEIGHT_SIGMA LUMA_WEIGHT_SIGMA GI_SAMPLES GI_BOUNCES GI_RESOLUTION \
          sunPathRotation CELESTIAL_SIZE_MULTIPLIER ATMOSPHERE_RESOLUTION SCATTERING_STEPS TRANSMITTANCE_STEPS CLOUDS_RESOLUTION CLOUDS_SCATTERING_STEPS WIND_SPEED CLOUDS_LAYER0_ALTITUDE CLOUDS_LAYER0_THICKNESS CLOUDS_LAYER0_COVERAGE CLOUDS_LAYER0_SWIRL VL_SCATTERING_STEPS FOG_ALTITUDE FOG_THICKNESS FOG_DENSITY \
          RAIN_PUDDLES_SIZE POM_LAYERS POM_DEPTH WATER_CAUSTICS_STRENGTH WATER_OCTAVES WAVE_STEEPNESS WAVE_AMPLITUDE WAVE_SPEED WATER_FOG_STEPS WATER_ABSORPTION_R WATER_ABSORPTION_G WATER_ABSORPTION_B WATER_SCATTERING_R WATER_SCATTERING_G WATER_SCATTERING_B \
          TAA_STRENGTH DOF_RADIUS BLOOM_STRENGTH VIGNETTE_STRENGTH FILM_GRAIN_STRENGTH SHARPEN_STRENGTH FOCAL APERTURE ISO SHUTTER_SPEED \
          LUT WHITE_BALANCE VIBRANCE SATURATION CONTRAST GAMMA GAIN LIFT

# Columns
screen.columns                  = 1
screen.FILTER.columns           = 1
screen.CAMERA_SETTINGS.columns  = 1
screen.WATER_ABSORPTION.columns = 3
screen.WATER_SCATTERING.columns = 3
